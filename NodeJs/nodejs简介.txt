1.node作为服务器的优缺点分析
node是一个单线程 异步回调的高性能 高并发服务器 处理高cpu的业务逻辑运算比较慢
https://www.cnblogs.com/qianzf/p/6798627.html

2.什么是协程？
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000

3.nodejs作为服务器优缺点分析
https://www.cnblogs.com/sysuys/p/3460614.html
优点：

　　1. 高并发（最重要的优点）

　　2. 适合I/O密集型应用

 

　   缺点：

　　1. 不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；

　　　　解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；

　　2. 只支持单核CPU，不能充分利用CPU

　　3. 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃

　　　　原因：单进程，单线程

　　　　解决方案：（1）Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；

　　　　　　　　　（2）开多个进程监听同一个端口，使用cluster模块；

　　4. 开源组件库质量参差不齐，更新快，向下不兼容

　　5. Debug不方便，错误没有stack trace

https://blog.csdn.net/workhardyxb/article/details/79635458
单线程，单线程的好处，减少了内存开销，操作系统的内存换页。

如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。

非阻塞I/O， 不会傻等I/O语句结束，而会执行后面的语句。

非阻塞就能解决问题了么？比如执行着小红的业务，执行过程中，小刚的I/O回调完成了，此时怎么办？？

事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。

https://www.cnblogs.com/qianzf/p/6798627.html 
node主要应用场景是在大前端，阿里的思路是比较合适的，但是必须要注意，绝对不能让node做太多的业务逻辑，他只适合接受人家生成好的数据，然后或渲染后，或直接发送到客户端。如果让node做复杂的业务逻辑，那会得不偿失的。这个阿里的人可以来说明一下，你们node主要应用的场景是不是都是比较简单的逻辑。