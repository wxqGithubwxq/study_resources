1.explain字段详解
https://www.cnblogs.com/butterfly100/archive/2018/01/15/8287569.html
explain partitions：相比 explain 多了个 partitions 字段，如果查询是基于分区表的话，会显示查询将访问的分区。
explain extended：会在 explain  的基础上额外提供一些查询优化的信息。紧随其后通过 show warnings 命令可以 得到优化后的查询语句，
从而看出优化器优化了什么。额外还有 filtered 列，是一个半分比的值，rows * filtered/100 可以估算出将要和 explain 中前一个表进行连接
的行数（前一个表指 explain 中的id值比当前表id值小的表）。

select_type字段表示对应行是简单还是复杂的查询
（1）simple：简单查询。查询不包含子查询和union
（2）primary：复杂查询中最外层的select
（3）subquery：包含在select中的子查询（不在from子句中）
（4）derived：包含在from子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表（derived的英文含义）
（5）union：在union中的第二个和随后的select
（6）union result：从union临时表检索结果的select

table字段表示explain的一行正在访问哪个表
当from子句中有子查询时,table列是<derivedN>格式，表示当前查询依赖id=N的查询，于是先执行id=N的查询。当有union时，
UNION RESULT的table列的值为<union1,2>，1和2表示参与union的select行id

type字段表示关联类型或访问类型，即MySQL决定如何查找表中的行
依次从最优到最差分别为：system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery >
 range > index > ALL
NULL：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，
不需要在执行时访问表

const, system：mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show warnings 的结果）。用于 primary key 或 unique key 
的所有列与常数比较时，所以表最多有一个匹配行，读取1次，速度比较快。
eq_ref：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，
简单的 select 查询不会出现这种 type。
ref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。
ref_or_null：类似ref，但是可以搜索值为NULL的行。
index_merge：表示使用了索引合并的优化方法。 例如下表：id是主键，tenant_id是普通索引。or 的时候没有用 primary key，
而是使用了 primary key(id) 和 tenant_id 索引
range：范围扫描通常出现在 in(), between ,> ,<, >= 等操作中。使用一个索引来检索给定范围的行。
index：和ALL一样，不同就是mysql只需扫描索引树，这通常比ALL快一些。
ALL：即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索引来进行优化了

possible_keys字段表示查询可能使用那些索引来查找
explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，
选择了全表查询。 
如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，
然后用 explain 查看效果。

key字段表示mysql实际采用哪个索引来优化对该表的访问
如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。

key_len字段表示mysql在索引里使用的字节数,通过这个值可以算出具体使用了索引中的哪些列
举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。
通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执行索引查找。

ref字段
这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），func，NULL，字段名（例：film.id）

rows字段
这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。

Extra字段
这一列展示的是额外信息,常见的重要值如下： 
distinct: 一旦mysql找到了与行相联合匹配的行，就不再搜索了
Using index：这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录。
是性能高的表现。
Using where：mysql服务器将在存储引擎检索行后再进行过滤。就是先读取整行数据，再按 where 条件进行检查，符合就留下，不符合就丢弃。
Using temporary：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。
Using filesort：mysql 会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时mysql会根据联接类型浏览所有符合条件的记录，
并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况下一般也是要考虑使用索引来优化的。


2.索引失效的情景,索引创建的原则
https://blog.csdn.net/wuseyukui/article/details/72312574
1、全值匹配我最爱
2、最佳左前缀法则（带头索引不能死，中间索引不能断）
3、不要在索引上做任何操作（计算、函数、自动/手动类型转换），不然会导致索引失效而转向全表扫描
4、mysql存储引擎不能继续使用索引中范围条件（bettween、<、>、in等）右边的列
5、尽量使用覆盖索引（只查询索引的列（索引列和查询列一致）），减少select *
6、索引字段上使用（！= 或者 < >）判断时，会导致索引失效而转向全表扫描
7、索引字段上使用 is null / is not null 判断时，会导致索引失效而转向全表扫描
8、索引字段使用like以通配符开头（‘%字符串’）时，会导致索引失效而转向全表扫描
9、索引字段是字符串，但查询时不加单引号，会导致索引失效而转向全表扫描
10、索引字段使用 or 时，会导致索引失效而转向全表扫描,但主键索引加普通索引会使两个索引都生效


3.关联查询索引的效果
https://blog.csdn.net/andyzhaojianhui/article/details/50380837
1、两表关联使用的条件字段中字段的长度是否是一致的
2、两表关联使用的条件字段中字段的编码是否是一致的
不一致导致索引失效
https://www.cnblogs.com/weizhenlu/p/5970392.html
https://blog.csdn.net/everda/article/details/77476716?locationNum=8&fps=1
